{
	"options": {
		"prefix": "ops",
		"body": "options ${1:name} = ${0:value}"
	},
	"require": {
		"prefix": "req",
		"body": "require ${0:module}"
	},
	"struct": {
		"prefix": "struct",
		"body": "struct ${1:name}\n\t${2:field} : ${0:type}"
	},
	"class": {
		"prefix": "class",
		"body": "class ${1:name}\n\t$0"
	},
	"varianttype": {
		"prefix": "variant",
		"body": "variant ${1:name}\n\t${2:field} : ${0:type}"
	},
	"enum": {
		"prefix": "enum",
		"body": "enum ${1:name}\n\t${0:ctor}"
	},
	"typedef": {
		"prefix": "tdef",
		"body": "typedef\n\t${1:name} = ${0:value}"
	},
	"def": {
		"prefix": "def",
		"body": "def ${1:name}($2)\n\t${0:pass}"
	},
	"def-abstract": {
		"prefix": "defa",
		"body": "def abstract ${1:name}($0)"
	},
	"def-override": {
		"prefix": "defo",
		"body": "def override ${1:name}($2)\n\t${0:pass}"
	},
	"block": {
		"prefix": "blk",
		"body": "$(${1:args})\n\t${0:pass}"
	},
	"lambda": {
		"prefix": "lambda",
		"body": "@ <| (${1:args})\n\t${0:pass}"
	},
	"lt": {
		"prefix": "lt",
		"body": "let ${0:name}"
	},
	"vr": {
		"prefix": "vr",
		"body": "var ${0:name}"
	},
	"let": {
		"prefix": "let",
		"body": "let ${1:name} = ${0:value}"
	},
	"var": {
		"prefix": "var",
		"body": "var ${1:name} = ${0:value}"
	},
	"lett": {
		"prefix": "lett",
		"body": "let ${1:name} : ${2:type} = ${0:value}"
	},
	"vart": {
		"prefix": "vart",
		"body": "var ${1:name} : ${2:type} = ${0:value}"
	},
	"vars": {
		"prefix": "vrs",
		"body": "var in scope ${0:name}"
	},
	"delete": {
		"prefix": "del",
		"body": "delete ${0:name}"
	},
	"for": {
		"prefix": "for",
		"body": "for ${1:name} in ${2:iter}\n\t${0:pass}"
	},
	"while": {
		"prefix": "while",
		"body": "while ${1:cond}\n\t${0:pass}"
	},
	"if": {
		"prefix": "if",
		"body": "if ${1:cond}\n\t${0:pass}"
	},
	"ifelse": {
		"prefix": "ifelse",
		"body": "if ${1:cond}\n\t${2:pass}\nelse\n\t${0:pass}"
	},
	"elif": {
		"prefix": "elif",
		"body": "elif ${1:cond}\n\t${0:pass}"
	},
	"where": {
		"prefix": "where",
		"body": "where ${0:cond}"
	},
	"try": {
		"prefix": "try",
		"body": "try\n\t${1:pass}\nrecover\n\t${0:pass}"
	},
	"finally": {
		"prefix": "fin",
		"body": "finally\n\t${0:pass}"
	},
	"array": {
		"prefix": "array",
		"body": "array<${0:type}>"
	},
	"table": {
		"prefix": "table",
		"body": "table<${1:keyType}; ${0:valueType}>"
	},
	"tuple": {
		"prefix": "tuple",
		"body": "tuple<$0>"
	},
	"variant": {
		"prefix": "variant",
		"body": "variant<$0>"
	},
	"smart_ptr": {
		"prefix": "smart_ptr",
		"body": "smart_ptr<$0>"
	}
}